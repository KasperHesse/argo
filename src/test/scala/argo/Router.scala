package argo

import chisel3._
import chiseltest._
import org.scalatest.flatspec.AnyFlatSpec

class SingleRouterPort0Test extends AnyFlatSpec with ChiselScalatestTester{
  "DUT" should "pass" in{
    test(new Router).withAnnotations(Seq(WriteVcdAnnotation)) {dut=>
      for(i <- 0 to 4){
        if(i === 0){
          //Incoming packet from port 0 (south) directed to port 4 (home).
          //This is indicated by the direction (2 LSB) also being 0 (south)
          //Packet headers: 110(SOP), 100(VLD), 100(VLD), 100(VLD), 101(EOP), 000(invalid)
          dut.io.inPort.port(i).req.poke(true.B)
          dut.io.inPort.port(i).data.poke("b11000111111111111111111111111111100".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10000111111111111111111111111111100".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10001111111111111111111111111110000".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10011111111111111111111111111000000".U)
          println("port4: ")
          dut.io.outPort.port(4).data.expect("h63fff3fff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10100111111111111111111110000000000".U)
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h43ffffffc".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b00000000000000000000000000000000000".U)
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h47ffffff0".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h4ffffffc0".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h53ffffc00".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h000000000".U)
          dut.clock.step()
        }else {
          dut.io.inPort.port(i).data.poke("b11000111111111111111111111111111100".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10000111111111111111111111111111100".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10001111111111111111111111111110000".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10011111111111111111111111111000000".U)
          println("port0: ")
          dut.io.outPort.port(0).data.expect("h63fff3fff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10100111111111111111111110000000000".U)
          println("port0:  ")
          dut.io.outPort.port(0).data.expect("h43ffffffc".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b00000000000000000000000000000000000".U)
          println("port0:  ")
          dut.io.outPort.port(0).data.expect("h47ffffff0".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(0).data.expect("h4ffffffc0".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(0).data.expect("h53ffffc00".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(0).data.expect("h000000000".U)
          dut.clock.step()
        }
      }
    }
  }
}


class SingleRouterPort1Test extends AnyFlatSpec with ChiselScalatestTester{
  "DUT" should "pass" in{
    test(new Router).withAnnotations(Seq(WriteVcdAnnotation)){dut=>
      for(i <- 0 to 4){
        if(i ===1){
          dut.io.inPort.port(i).data.poke("b11000111111111111111111111111111101".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10000111111111111111111111111111101".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10001111111111111111111111111110001".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10011111111111111111111111111000001".U)
          println("port4: ")
          dut.io.outPort.port(4).data.expect("h63fff3fff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10100111111111111111111110000000001".U)
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h43ffffffd".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b00000000000000000000000000000000000".U)
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h47ffffff1".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h4ffffffc1".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h53ffffc01".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h000000000".U)
          dut.clock.step()
        }else {
          dut.io.inPort.port(i).data.poke("b11000111111111111111111111111111101".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10000111111111111111111111111111101".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10001111111111111111111111111110001".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10011111111111111111111111111000001".U)
          println("port0: ")
          dut.io.outPort.port(1).data.expect("h63fff3fff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10100111111111111111111110000000001".U)
          println("port0:  ")
          dut.io.outPort.port(1).data.expect("h43ffffffd".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b00000000000000000000000000000000000".U)
          println("port0:  ")
          dut.io.outPort.port(1).data.expect("h47ffffff1".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(1).data.expect("h4ffffffc1".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(1).data.expect("h53ffffc01".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(1).data.expect("h000000000".U)
          dut.clock.step()
        }
      }
    }
  }
}


class SingleRouterPort2Test extends AnyFlatSpec with ChiselScalatestTester{
  "DUT" should "pass" in{
    test(new Router).withAnnotations(Seq(WriteVcdAnnotation)){dut=>
      for(i <- 0 to 4){
        if(i ===2){
          dut.io.inPort.port(i).data.poke("b11000111111111111111111111111111110".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10000111111111111111111111111111110".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10001111111111111111111111111110010".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10011111111111111111111111111000010".U)
          println("port4: ")
          dut.io.outPort.port(4).data.expect("h63fff3fff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10100111111111111111111110000000010".U)
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h43ffffffe".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b00000000000000000000000000000000000".U)
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h47ffffff2".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h4ffffffc2".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h53ffffc02".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h000000000".U)
          dut.clock.step()
        }else {
          dut.io.inPort.port(i).data.poke("b11000111111111111111111111111111110".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10000111111111111111111111111111110".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10001111111111111111111111111110010".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10011111111111111111111111111000010".U)
          println("port0: ")
          dut.io.outPort.port(2).data.expect("h63fff3fff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10100111111111111111111110000000010".U)
          println("port0:  ")
          dut.io.outPort.port(2).data.expect("h43ffffffe".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b00000000000000000000000000000000000".U)
          println("port0:  ")
          dut.io.outPort.port(2).data.expect("h47ffffff2".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(2).data.expect("h4ffffffc2".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(2).data.expect("h53ffffc02".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(2).data.expect("h000000000".U)
          dut.clock.step()
        }
      }
    }
  }
}


class SingleRouterPort3Test extends AnyFlatSpec with ChiselScalatestTester{
  "DUT" should "pass" in{
    test(new Router).withAnnotations(Seq(WriteVcdAnnotation)){dut=>
      for(i <- 0 to 4){
        if(i ===3){
          dut.io.inPort.port(i).data.poke("b11000111111111111111111111111111111".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10000111111111111111111111111111111".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10001111111111111111111111111110011".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10011111111111111111111111111000011".U)
          println("port4: ")
          dut.io.outPort.port(4).data.expect("h63fff3fff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10100111111111111111111110000000011".U)
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h43fffffff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b00000000000000000000000000000000000".U)
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h47ffffff3".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h4ffffffc3".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h53ffffc03".U)
          dut.clock.step()
          println("port4:  ")
          dut.io.outPort.port(4).data.expect("h000000000".U)
          dut.clock.step()
        }else {
          dut.io.inPort.port(i).data.poke("b11000111111111111111111111111111111".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10000111111111111111111111111111111".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10001111111111111111111111111110011".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10011111111111111111111111111000011".U)
          println("port0: ")
          dut.io.outPort.port(3).data.expect("h63fff3fff".U)
          dut.clock.step()
          dut.io.inPort.port(i).data.poke("b10100111111111111111111110000000011".U)
          println("port0:  ")
          dut.io.outPort.port(3).data.expect("h43fffffff".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.inPort.port(i).data.poke("b00000000000000000000000000000000000".U)
          dut.io.outPort.port(3).data.expect("h47ffffff3".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(3).data.expect("h4ffffffc3".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(3).data.expect("h53ffffc03".U)
          dut.clock.step()
          println("port0:  ")
          dut.io.outPort.port(3).data.expect("h000000000".U)
          dut.clock.step()
        }
      }
    }
  }
}

class SingleRouterPort4Test extends AnyFlatSpec with ChiselScalatestTester{
  "DUT" should "pass" in{
    test(new Router){dut=>
//from 4 to 0
      dut.io.inPort.port(4).data.poke("b11000111111111111111111111111111100".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10000111111111111111111111111111100".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10001111111111111111111111111110000".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10011111111111111111111111111000000".U)
      println("port0: ")
      dut.io.outPort.port(0).data.expect("h63fff3fff".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10100111111111111111111110000000000".U)
      println("port0:  ")
      dut.io.outPort.port(0).data.expect("h43ffffffc".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b00000000000000000000000000000000000".U)
      println("port0:  ")
      dut.io.outPort.port(0).data.expect("h47ffffff0".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(0).data.expect("h4ffffffc0".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(0).data.expect("h53ffffc00".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(0).data.expect("h000000000".U)
      dut.clock.step()
//from 4 to 1
      dut.io.inPort.port(4).data.poke("b11000111111111111111111111111111101".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10000111111111111111111111111111101".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10001111111111111111111111111110001".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10011111111111111111111111111000001".U)
      println("port0: ")
      dut.io.outPort.port(1).data.expect("h63fff3fff".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10100111111111111111111110000000001".U)
      println("port0:  ")
      dut.io.outPort.port(1).data.expect("h43ffffffd".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b00000000000000000000000000000000000".U)
      println("port0:  ")
      dut.io.outPort.port(1).data.expect("h47ffffff1".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(1).data.expect("h4ffffffc1".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(1).data.expect("h53ffffc01".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(1).data.expect("h000000000".U)
      dut.clock.step()
//from 4 to 2
      dut.io.inPort.port(4).data.poke("b11000111111111111111111111111111110".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10000111111111111111111111111111110".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10001111111111111111111111111110010".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10011111111111111111111111111000010".U)
      println("port0: ")
      dut.io.outPort.port(2).data.expect("h63fff3fff".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10100111111111111111111110000000010".U)
      println("port0:  ")
      dut.io.outPort.port(2).data.expect("h43ffffffe".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b00000000000000000000000000000000000".U)
      println("port0:  ")
      dut.io.outPort.port(2).data.expect("h47ffffff2".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(2).data.expect("h4ffffffc2".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(2).data.expect("h53ffffc02".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(2).data.expect("h000000000".U)
      dut.clock.step()
//from 4 to 3
      dut.io.inPort.port(4).data.poke("b11000111111111111111111111111111111".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10000111111111111111111111111111111".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10001111111111111111111111111110011".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10011111111111111111111111111000011".U)
      println("port0: ")
      dut.io.outPort.port(3).data.expect("h63fff3fff".U)
      dut.clock.step()
      dut.io.inPort.port(4).data.poke("b10100111111111111111111110000000011".U)
      println("port0:  ")
      dut.io.outPort.port(3).data.expect("h43fffffff".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.inPort.port(4).data.poke("b00000000000000000000000000000000000".U)
      dut.io.outPort.port(3).data.expect("h47ffffff3".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(3).data.expect("h4ffffffc3".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(3).data.expect("h53ffffc03".U)
      dut.clock.step()
      println("port0:  ")
      dut.io.outPort.port(3).data.expect("h000000000".U)
      dut.clock.step()
    }
  }
}